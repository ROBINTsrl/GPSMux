//*****************************************************************************
//*****************************************************************************
//  FILENAME: RX8.h
//   Version: 3.50, Updated on 2015/3/4 at 22:26:55
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION:  RX8 User Module C Language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef RX8_INCLUDE
#define RX8_INCLUDE

// include the global header file
#include <m8c.h>

#define RX8_RXBUF_ENABLE 0

//-------------------------------------------------
// Prototypes of the RX8 API.
//-------------------------------------------------

#if ( RX8_RXBUF_ENABLE )
extern char RX8_aRxBuffer[];
extern BYTE RX8_bRxCnt;
extern BYTE RX8_fStatus;
#endif

// Create pragmas to support proper argument and return value passing
#pragma fastcall16  RX8_EnableInt
#pragma fastcall16  RX8_DisableInt
#pragma fastcall16  RX8_Start
#pragma fastcall16  RX8_Stop
#pragma fastcall16  RX8_bReadRxData
#pragma fastcall16  RX8_bReadRxStatus

#pragma fastcall16  RX8_cGetChar
#pragma fastcall16  RX8_cReadChar
#pragma fastcall16  RX8_iReadChar

#if ( RX8_RXBUF_ENABLE )
#pragma fastcall16  RX8_CmdReset
#pragma fastcall16  RX8_bCmdCheck
#pragma fastcall16  RX8_bErrCheck
#pragma fastcall16  RX8_bCmdLength
#pragma fastcall16  RX8_szGetParam
#pragma fastcall16  RX8_szGetRestOfParams
#endif

//-------------------------------------------------
// Prototypes of the RX8 API.
//-------------------------------------------------
extern void  RX8_EnableInt(void);
extern void  RX8_DisableInt(void);
extern void  RX8_Start(BYTE bParity);
extern void  RX8_Stop(void);
extern BYTE  RX8_bReadRxData(void);
extern BYTE  RX8_bReadRxStatus(void);

// High level RX functions
extern CHAR         RX8_cGetChar(void);
extern CHAR         RX8_cReadChar(void);
extern INT          RX8_iReadChar(void);

#if ( RX8_RXBUF_ENABLE )
extern void   RX8_CmdReset(void);
extern BYTE   RX8_bCmdCheck(void);
extern BYTE   RX8_bErrCheck(void);
extern BYTE   RX8_bCmdLength(void);
extern char * RX8_szGetParam(void);
extern char * RX8_szGetRestOfParams(void);
#endif

// Old function call names, do not use.
// These names will be removed in a future release.
#pragma fastcall16 bRX8_ReadRxData
#pragma fastcall16 bRX8_ReadRxStatus
extern BYTE bRX8_ReadRxData(void);
extern BYTE bRX8_ReadRxStatus(void);

//-------------------------------------------------
// Constants for RX8 API's.
//-------------------------------------------------

//------------------------------------
// Receiver Interrupt masks
//------------------------------------
#define RX8_INT_REG_ADDR                       ( 0x0e1 )
#define RX8_bINT_MASK                          ( 0x80 )

//------------------------------------
// Receiver Parity masks
//------------------------------------
#define  RX8_PARITY_NONE         0x00
#define  RX8_PARITY_EVEN         0x02
#define  RX8_PARITY_ODD          0x06

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  RX8_RX_ACTIVE           0x10
#define  RX8_RX_COMPLETE         0x08
#define  RX8_RX_PARITY_ERROR     0x80
#define  RX8_RX_OVERRUN_ERROR    0x40
#define  RX8_RX_FRAMING_ERROR    0x20
#define  RX8_RX_ERROR            0xE0
#define  RX8_RX_NO_ERROR         0xE0         // This symbol is deprecated and will removed in the future

#define  RX8_RX_NO_DATA         0x01

#define  RX8_RX_BUF_ERROR                 0xF0  // Mask for any Rx that may occur.
#define  RX8_RX_BUF_OVERRUN               0x10  // This indicates the software buffer has
                                                           // been over run.
#define  RX8_RX_BUF_CMDTERM               0x01  // Command terminator has been received.

// Old defines, will be removed in future release
#define  RX8_PARITY_NONE         0x00
#define  RX8_PARITY_EVEN         0x02
#define  RX8_PARITY_ODD          0x06
#define  RX8_RX_ACTIVE           0x10
#define  RX8_RX_COMPLETE         0x08
#define  RX8_RX_PARITY_ERROR     0x80
#define  RX8_RX_OVERRUN_ERROR    0x40
#define  RX8_RX_FRAMING_ERROR    0x20
#define  RX8_RX_NO_ERROR         0xE0

//-------------------------------------------------
// Register Addresses for RX8
//-------------------------------------------------
#pragma ioport  RX8_CONTROL_REG:    0x03f                  // Control register
BYTE            RX8_CONTROL_REG;
#pragma ioport  RX8_RX_SHIFT_REG:   0x03c                  // RX Shift Register register
BYTE            RX8_RX_SHIFT_REG;
#pragma ioport  RX8_RX_BUFFER_REG:  0x03e                  // RX Buffer Register
BYTE            RX8_RX_BUFFER_REG;
#pragma ioport  RX8_FUNC_REG:   0x13c                      // Function register
BYTE            RX8_FUNC_REG;
#pragma ioport  RX8_INPUT_REG:  0x13d                      // Input register
BYTE            RX8_INPUT_REG;
#pragma ioport  RX8_OUTPUT_REG: 0x13e                      // Output register
BYTE            RX8_OUTPUT_REG;

#endif
// end of file RX8.h

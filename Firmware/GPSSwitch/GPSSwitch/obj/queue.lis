                        .module queue.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./queue.c
 0000                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\queue.c
 0000                   .dbfunc e initQueue _initQueue fV
 0000                   .dbstruct 0 67 .1
 0000                   .dbfield 0 count c
 0000                   .dbfield 1 write_idx c
 0000                   .dbfield 2 read_idx c
 0000                   .dbfield 3 queue A[64:64]c
 0000                   .dbend
 0000           ;              q -> X-5
 0000           _initQueue::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002                   .dbline 4
 0002           ; #include "queue.h"
 0002           ; 
 0002           ; void initQueue(Queue* q)
 0002           ; {
 0002                   .dbline 5
 0002           ;       q->count = 0;
 0002 52FC              mov A,[X-4]
 0004 5300              mov [__r1],A
 0006 5000              mov A,0
 0008 3F00              mvi [__r1],A
 000A                   .dbline 6
 000A           ;       q->read_idx = 0;
 000A 52FC              mov A,[X-4]
 000C 0102              add A,2
 000E 5300              mov [__r1],A
 0010 5000              mov A,0
 0012 3F00              mvi [__r1],A
 0014                   .dbline 7
 0014           ;       q->write_idx = 0;
 0014 52FC              mov A,[X-4]
 0016 0101              add A,1
 0018 5300              mov [__r1],A
 001A 5000              mov A,0
 001C 3F00              mvi [__r1],A
 001E                   .dbline -2
 001E           L2:
 001E 20                pop X
 001F                   .dbline 0 ; func end
 001F 7F                ret
 0020                   .dbsym l q -5 pS[.1]
 0020                   .dbend
 0020                   .dbfunc e dequeue _dequeue fc
 0020           ;           data -> X-7
 0020           ;              q -> X-5
 0020           _dequeue::
 0020                   .dbline -1
 0020 10                push X
 0021 4F                mov X,SP
 0022                   .dbline 10
 0022           ; }
 0022           ; 
 0022           ; BOOL dequeue(Queue* q, BYTE* data) {
 0022                   .dbline 11
 0022           ;       if (q->count<=0)
 0022 52FC              mov A,[X-4]
 0024 5300              mov [__r1],A
 0026 3E00              mvi A,[__r1]
 0028 5300              mov [__r0],A
 002A 5000              mov A,0
 002C 3A00              cmp A,[__r0]
 002E C005              jc L4
 0030           X0:
 0030                   .dbline 12
 0030           ;               return FALSE;
 0030 5000              mov A,0
 0032 8057              xjmp L3
 0034           L4:
 0034                   .dbline 14
 0034           ; 
 0034           ;       *data = q->queue[q->read_idx];
 0034 52FC              mov A,[X-4]
 0036 0103              add A,3
 0038 5300              mov [__r1],A
 003A 52FC              mov A,[X-4]
 003C 0102              add A,2
 003E 5300              mov [__r3],A
 0040 3E00              mvi A,[__r3]
 0042 0200              add A,[__r1]
 0044 5300              mov [__r1],A
 0046 3E00              mvi A,[__r1]
 0048 5300              mov [__r0],A
 004A 52FA              mov A,[X-6]
 004C 5300              mov [__r3],A
 004E 5100              mov A,[__r0]
 0050 3F00              mvi [__r3],A
 0052                   .dbline 16
 0052           ;       
 0052           ;       q->read_idx++;
 0052 52FC              mov A,[X-4]
 0054 0102              add A,2
 0056 5300              mov [__r1],A
 0058 3E00              mvi A,[__r1]
 005A 7A00              dec [__r1]
 005C 0101              add A,1
 005E 3F00              mvi [__r1],A
 0060                   .dbline 18
 0060           ;       
 0060           ;       q->count--;
 0060 52FC              mov A,[X-4]
 0062 5300              mov [__r1],A
 0064 3E00              mvi A,[__r1]
 0066 1101              sub A,1
 0068 5300              mov [__r0],A
 006A 52FC              mov A,[X-4]
 006C 5300              mov [__r3],A
 006E 5100              mov A,[__r0]
 0070 3F00              mvi [__r3],A
 0072                   .dbline 20
 0072           ;       
 0072           ;       if (q->read_idx >= QUEUE_DEPTH)
 0072 52FC              mov A,[X-4]
 0074 0102              add A,2
 0076 5300              mov [__r1],A
 0078 3E00              mvi A,[__r1]
 007A 3940              cmp A,64
 007C C00B              jc L6
 007E           X1:
 007E                   .dbline 21
 007E           ;               q->read_idx = 0;
 007E 52FC              mov A,[X-4]
 0080 0102              add A,2
 0082 5300              mov [__r1],A
 0084 5000              mov A,0
 0086 3F00              mvi [__r1],A
 0088           L6:
 0088                   .dbline 23
 0088           ;       
 0088           ;       return TRUE;
 0088 5001              mov A,1
 008A                   .dbline -2
 008A           L3:
 008A 20                pop X
 008B                   .dbline 0 ; func end
 008B 7F                ret
 008C                   .dbsym l data -7 pc
 008C                   .dbsym l q -5 pS[.1]
 008C                   .dbend
 008C                   .dbfunc e enqueue _enqueue fV
 008C           ;          bData -> X-6
 008C           ;              q -> X-5
 008C           _enqueue::
 008C                   .dbline -1
 008C 10                push X
 008D 4F                mov X,SP
 008E                   .dbline 26
 008E           ; }
 008E           ; 
 008E           ; void enqueue(Queue* q, BYTE bData) {
 008E                   .dbline 27
 008E           ;       if (q->count>QUEUE_DEPTH)
 008E 52FC              mov A,[X-4]
 0090 5300              mov [__r1],A
 0092 3E00              mvi A,[__r1]
 0094 5300              mov [__r0],A
 0096 5040              mov A,64
 0098 3A00              cmp A,[__r0]
 009A D003              jnc L9
 009C           X2:
 009C                   .dbline 28
 009C           ;               return; // TODO: manage overrun ?
 009C 804D              xjmp L8
 009E           L9:
 009E                   .dbline 30
 009E           ;       
 009E           ;       q->queue[q->write_idx] = bData;
 009E 52FC              mov A,[X-4]
 00A0 0103              add A,3
 00A2 5300              mov [__r1],A
 00A4 52FC              mov A,[X-4]
 00A6 0101              add A,1
 00A8 5300              mov [__r3],A
 00AA 3E00              mvi A,[__r3]
 00AC 0200              add A,[__r1]
 00AE 5300              mov [__r1],A
 00B0 52FA              mov A,[X-6]
 00B2 3F00              mvi [__r1],A
 00B4                   .dbline 32
 00B4           ;       
 00B4           ;       q->write_idx++;
 00B4 52FC              mov A,[X-4]
 00B6 0101              add A,1
 00B8 5300              mov [__r1],A
 00BA 3E00              mvi A,[__r1]
 00BC 7A00              dec [__r1]
 00BE 0101              add A,1
 00C0 3F00              mvi [__r1],A
 00C2                   .dbline 34
 00C2           ;       
 00C2           ;       q->count++;
 00C2 52FC              mov A,[X-4]
 00C4 5300              mov [__r1],A
 00C6 3E00              mvi A,[__r1]
 00C8 0101              add A,1
 00CA 5300              mov [__r0],A
 00CC 52FC              mov A,[X-4]
 00CE 5300              mov [__r3],A
 00D0 5100              mov A,[__r0]
 00D2 3F00              mvi [__r3],A
 00D4                   .dbline 36
 00D4           ;       
 00D4           ;       if (q->write_idx >= QUEUE_DEPTH)
 00D4 52FC              mov A,[X-4]
 00D6 0101              add A,1
 00D8 5300              mov [__r1],A
 00DA 3E00              mvi A,[__r1]
 00DC 3940              cmp A,64
 00DE C00B              jc L11
 00E0           X3:
 00E0                   .dbline 37
 00E0           ;               q->write_idx = 0;
 00E0 52FC              mov A,[X-4]
 00E2 0101              add A,1
 00E4 5300              mov [__r1],A
 00E6 5000              mov A,0
 00E8 3F00              mvi [__r1],A
 00EA           L11:
 00EA                   .dbline -2
 00EA           L8:
 00EA 20                pop X
 00EB                   .dbline 0 ; func end
 00EB 7F                ret
 00EC                   .dbsym l bData -6 c
 00EC                   .dbsym l q -5 pS[.1]
 00EC                   .dbend

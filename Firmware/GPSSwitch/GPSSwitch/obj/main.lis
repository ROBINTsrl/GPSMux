                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _TX8_TX_Pending::
 0000                   .blkb 1
                        .area idata(rom,lit)
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile ./main.c
 0001                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0001                   .dbsym e TX8_TX_Pending _TX8_TX_Pending c
 0001           _gps1::
 0001                   .blkb 1
                        .area idata(rom,lit)
 0001 00                .byte 0
                        .area data(ram, con, rel)
 0002                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0002                   .blkb 1
                        .area idata(rom,lit)
 0002 00                .byte 0
                        .area data(ram, con, rel)
 0003                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0003                   .blkb 1
                        .area idata(rom,lit)
 0003 00                .byte 0
                        .area data(ram, con, rel)
 0004                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0004                   .dbstruct 0 3 .2
 0004                   .dbfield 0 fix_status c
 0004                   .dbfield 1 parse_status c
 0004                   .dbfield 2 idx c
 0004                   .dbend
 0004                   .dbsym e gps1 _gps1 S[.2]
 0004           _gps2::
 0004                   .blkb 1
                        .area idata(rom,lit)
 0004 00                .byte 0
                        .area data(ram, con, rel)
 0005                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0005                   .blkb 1
                        .area idata(rom,lit)
 0005 00                .byte 0
                        .area data(ram, con, rel)
 0006                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0006                   .blkb 1
                        .area idata(rom,lit)
 0006 00                .byte 0
                        .area data(ram, con, rel)
 0007                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0007                   .dbsym e gps2 _gps2 S[.2]
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0000                   .dbfunc e parse _parse fV
 0000           ;            gps -> X-6
 0000           ;              c -> X-4
 0000           _parse::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3802              add SP,2
 0004                   .dbline 39
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; 
 0004           ; #include "queue.h"
 0004           ; 
 0004           ; #define NO_FIX                                0
 0004           ; #define FIX0                          1
 0004           ; #define FIX1                          2
 0004           ; #define FIX2                          3
 0004           ; 
 0004           ; #define IDLE                          0
 0004           ; #define       SENTENCE                        1
 0004           ; #define SFIX                          2
 0004           ; 
 0004           ; #define SoM                                   '$'
 0004           ; #define GGA_PREFIX                    "GPGGA"
 0004           ; 
 0004           ; #define FIX_POSITION          5       // Six commas minus 1 due to parser structure
 0004           ; #define FIX_POSITION_MARK     ','
 0004           ; 
 0004           ; typedef struct {
 0004           ;       BYTE fix_status;
 0004           ;       BYTE parse_status;
 0004           ;       BYTE idx;
 0004           ; } GPSStatus;
 0004           ; 
 0004           ; BOOL TX8_TX_Pending = FALSE;
 0004           ; 
 0004           ; GPSStatus gps1 = { NO_FIX, IDLE, 0 };
 0004           ; GPSStatus gps2 = { NO_FIX, IDLE, 0 };
 0004           ; 
 0004           ; Queue queue;
 0004           ; 
 0004           ; void parse(char c, GPSStatus* gps)
 0004           ; {
 0004                   .dbline 41
 0004           ;       // TODO: TODO add support for GPGSA sentence
 0004           ;       switch (gps->parse_status)
 0004 52FB              mov A,[X-5]
 0006 0101              add A,1
 0008 5300              mov [__r1],A
 000A 3E00              mvi A,[__r1]
 000C 5401              mov [X+1],A
 000E 560000            mov [X+0],0
 0011 3D0000            cmp [X+0],0
 0014 B006              jnz X0
 0016 3D0100            cmp [X+1],0
 0019 A017              jz L7
 001B           X0:
 001B 3D0000            cmp [X+0],0
 001E B006              jnz X1
 0020 3D0101            cmp [X+1],1
 0023 A028              jz L10
 0025           X1:
 0025 3D0000            cmp [X+0],0
 0028 B006              jnz X2
 002A 3D0102            cmp [X+1],2
 002D A08C              jz L16
 002F           X2:
 002F 80D7              xjmp L4
 0031           L7:
 0031                   .dbline 44
 0031           ;       {
 0031           ;               case IDLE:
 0031           ;                       if (c == SoM) {
 0031 3DFC24            cmp [X-4],36
 0034 B0DC              jnz L5
 0036                   .dbline 45
 0036           ;                               gps->parse_status = SENTENCE;
 0036                   .dbline 45
 0036 52FB              mov A,[X-5]
 0038 0101              add A,1
 003A 5300              mov [__r1],A
 003C 5001              mov A,1
 003E 3F00              mvi [__r1],A
 0040                   .dbline 46
 0040           ;                               gps->idx = 0;
 0040 52FB              mov A,[X-5]
 0042 0102              add A,2
 0044 5300              mov [__r1],A
 0046 5000              mov A,0
 0048 3F00              mvi [__r1],A
 004A                   .dbline 47
 004A           ;                       }
 004A                   .dbline 48
 004A           ;                       break;
 004A 80C6              xjmp L5
 004C           L10:
 004C                   .dbline 51
 004C           ; 
 004C           ;               case SENTENCE:
 004C           ;                       if ((gps->idx < (sizeof(GGA_PREFIX)-1)) && (c == GGA_PREFIX[gps->idx]))
 004C 52FB              mov A,[X-5]
 004E 0102              add A,2
 0050 5300              mov [__r1],A
 0052 3E00              mvi A,[__r1]
 0054 5300              mov [__r1],A
 0056 550000            mov [__r0],0
 0059 1105              sub A,5
 005B 5000              mov A,0
 005D 1900              sbb A,0
 005F D02C              jnc L11
 0061           X3:
 0061 06000C            add [__r1],<L13
 0064 0E000C            adc [__r0],>L13
 0067 5100              mov A,[__r0]
 0069 10                push X
 006A 5800              mov X,[__r1]
 006C 28                romx
 006D 20                pop X
 006E 5300              mov [__r0],A
 0070 52FC              mov A,[X-4]
 0072 3A00              cmp A,[__r0]
 0074 B017              jnz L11
 0076                   .dbline 52
 0076           ;                               gps->idx++;
 0076 52FB              mov A,[X-5]
 0078 0102              add A,2
 007A 5300              mov [__r1],A
 007C 52FA              mov A,[X-6]
 007E 0900              adc A,0
 0080 5300              mov [__r0],A
 0082 3E00              mvi A,[__r1]
 0084 7A00              dec [__r1]
 0086 0101              add A,1
 0088 3F00              mvi [__r1],A
 008A 8086              xjmp L5
 008C           L11:
 008C                   .dbline 53
 008C           ;                       else if (gps->idx == (sizeof (GGA_PREFIX)-1)) {
 008C 52FB              mov A,[X-5]
 008E 0102              add A,2
 0090 5300              mov [__r1],A
 0092 3E00              mvi A,[__r1]
 0094 3905              cmp A,5
 0096 B017              jnz L14
 0098                   .dbline 54
 0098           ;                               gps->idx = 0;
 0098                   .dbline 54
 0098 52FB              mov A,[X-5]
 009A 0102              add A,2
 009C 5300              mov [__r1],A
 009E 5000              mov A,0
 00A0 3F00              mvi [__r1],A
 00A2                   .dbline 55
 00A2           ;                               gps->parse_status = SFIX;
 00A2 52FB              mov A,[X-5]
 00A4 0101              add A,1
 00A6 5300              mov [__r1],A
 00A8 5002              mov A,2
 00AA 3F00              mvi [__r1],A
 00AC                   .dbline 56
 00AC           ;                       }
 00AC 8064              xjmp L5
 00AE           L14:
 00AE                   .dbline 58
 00AE           ;                       else
 00AE           ;                               gps->parse_status = IDLE;
 00AE 52FB              mov A,[X-5]
 00B0 0101              add A,1
 00B2 5300              mov [__r1],A
 00B4 5000              mov A,0
 00B6 3F00              mvi [__r1],A
 00B8                   .dbline 59
 00B8           ;                       break;
 00B8 8058              xjmp L5
 00BA           L16:
 00BA                   .dbline 62
 00BA           ;               
 00BA           ;               case SFIX:
 00BA           ;                       if ((gps->idx<FIX_POSITION) && (c == FIX_POSITION_MARK))
 00BA 52FB              mov A,[X-5]
 00BC 0102              add A,2
 00BE 5300              mov [__r1],A
 00C0 3E00              mvi A,[__r1]
 00C2 3905              cmp A,5
 00C4 D01C              jnc L17
 00C6           X4:
 00C6 3DFC2C            cmp [X-4],44
 00C9 B017              jnz L17
 00CB                   .dbline 63
 00CB           ;                               gps->idx++;
 00CB 52FB              mov A,[X-5]
 00CD 0102              add A,2
 00CF 5300              mov [__r1],A
 00D1 52FA              mov A,[X-6]
 00D3 0900              adc A,0
 00D5 5300              mov [__r0],A
 00D7 3E00              mvi A,[__r1]
 00D9 7A00              dec [__r1]
 00DB 0101              add A,1
 00DD 3F00              mvi [__r1],A
 00DF 8031              xjmp L5
 00E1           L17:
 00E1                   .dbline 64
 00E1           ;                       else if (gps->idx==FIX_POSITION) {
 00E1 52FB              mov A,[X-5]
 00E3 0102              add A,2
 00E5 5300              mov [__r1],A
 00E7 3E00              mvi A,[__r1]
 00E9 3905              cmp A,5
 00EB B025              jnz L5
 00ED                   .dbline 65
 00ED           ;                               gps->parse_status = IDLE;
 00ED                   .dbline 65
 00ED 52FB              mov A,[X-5]
 00EF 0101              add A,1
 00F1 5300              mov [__r1],A
 00F3 5000              mov A,0
 00F5 3F00              mvi [__r1],A
 00F7                   .dbline 66
 00F7           ;                               gps->fix_status = c - '0';
 00F7 52FC              mov A,[X-4]
 00F9 1130              sub A,48
 00FB 5300              mov [__r0],A
 00FD 52FB              mov A,[X-5]
 00FF 5300              mov [__r3],A
 0101 5100              mov A,[__r0]
 0103 3F00              mvi [__r3],A
 0105                   .dbline 67
 0105           ;                       }
 0105                   .dbline 68
 0105           ;                       break;
 0105 800B              xjmp L5
 0107           L4:
 0107                   .dbline 71
 0107           ; 
 0107           ;               default :
 0107           ;                       gps->parse_status = IDLE;
 0107 52FB              mov A,[X-5]
 0109 0101              add A,1
 010B 5300              mov [__r1],A
 010D 5000              mov A,0
 010F 3F00              mvi [__r1],A
 0111                   .dbline 72
 0111           ;                       break;
 0111           L5:
 0111                   .dbline -2
 0111           L3:
 0111 38FE              add SP,-2
 0113 20                pop X
 0114                   .dbline 0 ; func end
 0114 7F                ret
 0115                   .dbsym l gps -6 pS[.2]
 0115                   .dbsym l c -4 c
 0115                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0000           L22:
 0000                   .blkb 1
 0001           L23:
 0001                   .blkb 1
                        .area text(rom, con, rel)
 0115                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0115                   .dbfunc e RX8_1_IRQ _RX8_1_IRQ fV
 0115                   .dbsym s _bStatus L23 c
 0115                   .dbsym s _bData L22 c
 0115           _RX8_1_IRQ::
 0115                   .dbline -1
 0115                   .dbline 77
 0115           ;       }
 0115           ; }
 0115           ; 
 0115           ; void RX8_1_IRQ(void )
 0115           ; {
 0115                   .dbline 81
 0115           ;       static BYTE _bData;
 0115           ;       static BYTE _bStatus;
 0115           ;       
 0115           ;       _bStatus = RX8_1_bReadRxStatus();
 0115 10                push X
 0116 7C0000            xcall _RX8_1_bReadRxStatus
 0119 20                pop X
 011A 5301              mov [L23],A
 011C                   .dbline 83
 011C           ;       
 011C           ;       if ((_bStatus & RX8_1_RX_COMPLETE) && !(_bStatus & RX8_1_RX_ERROR))
 011C 470108            tst [L23],8
 011F A048              jz L24
 0121 4701E0            tst [L23],-32
 0124 B043              jnz L24
 0126                   .dbline 85
 0126           ;       {
 0126           ;               _bData = RX8_1_bReadRxData();
 0126                   .dbline 85
 0126 10                push X
 0127 7C0000            xcall _RX8_1_bReadRxData
 012A 20                pop X
 012B 5300              mov [L22],A
 012D                   .dbline 87
 012D           ;               
 012D           ;               parse(_bData, &gps1);
 012D 5001              mov A,>_gps1
 012F 08                push A
 0130 5001              mov A,<_gps1
 0132 08                push A
 0133 5100              mov A,[L22]
 0135 08                push A
 0136 9EC8              xcall _parse
 0138 38FD              add SP,-3
 013A                   .dbline 89
 013A           ;               
 013A           ;               if (gps1.fix_status >= gps2.fix_status) // Higher priority
 013A 5101              mov A,[_gps1]
 013C 3A04              cmp A,[_gps2]
 013E C011              jc L26
 0140           X5:
 0140                   .dbline 90
 0140           ;                       enqueue(&queue, _bData);
 0140 5100              mov A,[L22]
 0142 08                push A
 0143 5004              mov A,>_queue
 0145 08                push A
 0146 5004              mov A,<_queue
 0148 08                push A
 0149 7C0000            xcall _enqueue
 014C 38FD              add SP,-3
 014E 8019              xjmp L27
 0150           L26:
 0150                   .dbline 91
 0150           ;               else if ((gps1.fix_status == NO_FIX) && (gps2.fix_status == NO_FIX))    // Out GPS1 data if both GPSx are NOT FIXED
 0150 3C0100            cmp [_gps1],0
 0153 B014              jnz L28
 0155 3C0400            cmp [_gps2],0
 0158 B00F              jnz L28
 015A                   .dbline 92
 015A           ;                       enqueue(&queue, _bData);                        
 015A 5100              mov A,[L22]
 015C 08                push A
 015D 5004              mov A,>_queue
 015F 08                push A
 0160 5004              mov A,<_queue
 0162 08                push A
 0163 7C0000            xcall _enqueue
 0166 38FD              add SP,-3
 0168           L28:
 0168           L27:
 0168                   .dbline 93
 0168           ;       }
 0168           L24:
 0168                   .dbline -2
 0168           L21:
 0168                   .dbline 0 ; func end
 0168 7F                ret
 0169                   .dbend
                        .area bss(ram, con, rel)
 0002                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0002           L31:
 0002                   .blkb 1
 0003           L32:
 0003                   .blkb 1
                        .area text(rom, con, rel)
 0169                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0169                   .dbfunc e RX8_2_IRQ _RX8_2_IRQ fV
 0169                   .dbsym s _bStatus L32 c
 0169                   .dbsym s _bData L31 c
 0169           _RX8_2_IRQ::
 0169                   .dbline -1
 0169                   .dbline 97
 0169           ; }
 0169           ; 
 0169           ; void RX8_2_IRQ(void )
 0169           ; {
 0169                   .dbline 101
 0169           ;       static BYTE _bData;
 0169           ;       static BYTE _bStatus;
 0169           ;       
 0169           ;       _bStatus = RX8_2_bReadRxStatus();
 0169 10                push X
 016A 7C0000            xcall _RX8_2_bReadRxStatus
 016D 20                pop X
 016E 5303              mov [L32],A
 0170                   .dbline 103
 0170           ;       
 0170           ;       if ((_bStatus & RX8_2_RX_COMPLETE) && !(_bStatus & RX8_2_RX_ERROR))
 0170 470308            tst [L32],8
 0173 A02E              jz L33
 0175 4703E0            tst [L32],-32
 0178 B029              jnz L33
 017A                   .dbline 105
 017A           ;       {
 017A           ;               _bData = RX8_2_bReadRxData();
 017A                   .dbline 105
 017A 10                push X
 017B 7C0000            xcall _RX8_2_bReadRxData
 017E 20                pop X
 017F 5302              mov [L31],A
 0181                   .dbline 107
 0181           ; 
 0181           ;               parse(_bData, &gps2);
 0181 5004              mov A,>_gps2
 0183 08                push A
 0184 5004              mov A,<_gps2
 0186 08                push A
 0187 5102              mov A,[L31]
 0189 08                push A
 018A 9E74              xcall _parse
 018C 38FD              add SP,-3
 018E                   .dbline 109
 018E           ; 
 018E           ;               if (gps2.fix_status > gps1.fix_status)
 018E 5101              mov A,[_gps1]
 0190 3A04              cmp A,[_gps2]
 0192 D00F              jnc L35
 0194           X6:
 0194                   .dbline 110
 0194           ;                       enqueue(&queue, _bData);
 0194 5102              mov A,[L31]
 0196 08                push A
 0197 5004              mov A,>_queue
 0199 08                push A
 019A 5004              mov A,<_queue
 019C 08                push A
 019D 7C0000            xcall _enqueue
 01A0 38FD              add SP,-3
 01A2           L35:
 01A2                   .dbline 111
 01A2           ;       }
 01A2           L33:
 01A2                   .dbline -2
 01A2           L30:
 01A2                   .dbline 0 ; func end
 01A2 7F                ret
 01A3                   .dbend
 01A3                   .dbfunc e TX8_IRQ _TX8_IRQ fV
 01A3           _TX8_IRQ::
 01A3                   .dbline -1
 01A3                   .dbline 115
 01A3           ; }
 01A3           ; 
 01A3           ; void TX8_IRQ(void )
 01A3           ; {
 01A3                   .dbline 116
 01A3           ;       TX8_TX_Pending = TRUE;
 01A3 550001            mov [_TX8_TX_Pending],1
 01A6                   .dbline -2
 01A6           L37:
 01A6                   .dbline 0 ; func end
 01A6 7F                ret
 01A7                   .dbend
 01A7                   .dbfunc e main _main fV
 01A7           ;         _bData -> X+0
 01A7           _main::
 01A7                   .dbline -1
 01A7 10                push X
 01A8 4F                mov X,SP
 01A9 3801              add SP,1
 01AB                   .dbline 120
 01AB           ; }
 01AB           ; 
 01AB           ; void main(void)
 01AB           ; {
 01AB                   .dbline 123
 01AB           ;       BYTE _bData;
 01AB           ;       
 01AB           ;       initQueue(&queue);
 01AB 5004              mov A,>_queue
 01AD 08                push A
 01AE 5004              mov A,<_queue
 01B0 08                push A
 01B1 7C0000            xcall _initQueue
 01B4 38FE              add SP,-2
 01B6                   .dbline 125
 01B6           ;       
 01B6           ;       M8C_EnableGInt;
 01B6 7101                      or  F, 01h
 01B8           
 01B8                   .dbline 127
 01B8           ;       
 01B8           ;       TX8_EnableInt();
 01B8 10                push X
 01B9 7C0000            xcall _TX8_EnableInt
 01BC                   .dbline 128
 01BC           ;       TX8_Start(TX8_PARITY_NONE);
 01BC 5000              mov A,0
 01BE 7C0000            xcall _TX8_Start
 01C1                   .dbline 130
 01C1           ;       
 01C1           ;       RX8_1_EnableInt();
 01C1 7C0000            xcall _RX8_1_EnableInt
 01C4                   .dbline 131
 01C4           ;       RX8_1_Start(RX8_1_PARITY_NONE);
 01C4 5000              mov A,0
 01C6 7C0000            xcall _RX8_1_Start
 01C9                   .dbline 133
 01C9           ; 
 01C9           ;       RX8_2_EnableInt();
 01C9 7C0000            xcall _RX8_2_EnableInt
 01CC                   .dbline 134
 01CC           ;       RX8_2_Start(RX8_2_PARITY_NONE);
 01CC 5000              mov A,0
 01CE 7C0000            xcall _RX8_2_Start
 01D1                   .dbline 136
 01D1           ;       
 01D1           ;       TX8_CPutString("GPSSwitch\n\r");
 01D1 5000              mov A,>L39
 01D3 08                push A
 01D4 5000              mov A,<L39
 01D6 5C                mov X,A
 01D7 18                pop A
 01D8 7C0000            xcall _TX8_CPutString
 01DB                   .dbline 138
 01DB           ;       
 01DB           ;       LED_FIX_Off();
 01DB 7C0000            xcall _LED_FIX_Off
 01DE 20                pop X
 01DF 803E              xjmp L41
 01E1           L40:
 01E1                   .dbline 141
 01E1           ;       
 01E1           ;       while (TRUE)
 01E1           ;       {
 01E1                   .dbline 142
 01E1           ;               M8C_ClearWDT;
 01E1 62E300            mov REG[0xe3],0
 01E4                   .dbline 144
 01E4           ;               
 01E4           ;               if ( TX8_TX_Pending )
 01E4 3C0000            cmp [_TX8_TX_Pending],0
 01E7 A01E              jz L43
 01E9                   .dbline 146
 01E9           ;               {                       
 01E9           ;                       if(dequeue(&queue, &_bData))
 01E9                   .dbline 146
 01E9 5100              mov A,[__r0]
 01EB 08                push A
 01EC 10                push X
 01ED 5004              mov A,>_queue
 01EF 08                push A
 01F0 5004              mov A,<_queue
 01F2 08                push A
 01F3 7C0000            xcall _dequeue
 01F6 38FC              add SP,-4
 01F8 3900              cmp A,0
 01FA A00B              jz L45
 01FC                   .dbline 148
 01FC           ;                       {
 01FC           ;                               TX8_TX_Pending = FALSE;
 01FC                   .dbline 148
 01FC 550000            mov [_TX8_TX_Pending],0
 01FF                   .dbline 149
 01FF           ;                               TX8_SendData(_bData);
 01FF 10                push X
 0200 5200              mov A,[X+0]
 0202 7C0000            xcall _TX8_SendData
 0205 20                pop X
 0206                   .dbline 150
 0206           ;                       }
 0206           L45:
 0206                   .dbline 151
 0206           ;               }
 0206           L43:
 0206                   .dbline 153
 0206           ;               
 0206           ;               if ((gps1.fix_status > NO_FIX) || (gps2.fix_status > NO_FIX))
 0206 5000              mov A,0
 0208 3A01              cmp A,[_gps1]
 020A C007              jc L49
 020C           X8:
 020C 5000              mov A,0
 020E 3A04              cmp A,[_gps2]
 0210 D008              jnc L47
 0212           X9:
 0212           L49:
 0212                   .dbline 154
 0212           ;                       LED_FIX_On();
 0212 10                push X
 0213 7C0000            xcall _LED_FIX_On
 0216 20                pop X
 0217 8006              xjmp L48
 0219           L47:
 0219                   .dbline 156
 0219           ;               else 
 0219           ;                       LED_FIX_Off();
 0219 10                push X
 021A 7C0000            xcall _LED_FIX_Off
 021D 20                pop X
 021E           L48:
 021E                   .dbline 157
 021E           ;       }
 021E           L41:
 021E                   .dbline 140
 021E 8FC2              xjmp L40
 0220           X7:
 0220                   .dbline -2
 0220           L38:
 0220 38FF              add SP,-1
 0222 20                pop X
 0223                   .dbline 0 ; func end
 0223 8FFF              jmp .
 0225                   .dbsym l _bData 0 c
 0225                   .dbend
                        .area bss(ram, con, rel)
 0004                   .dbfile C:\Users\MAB0B~1.SAN\Desktop\GPSMux\GPSSWI~1\GPSSWI~1\main.c
 0004           _queue::
 0004                   .blkb 67
 0047                   .dbstruct 0 67 .1
 0047                   .dbfield 0 count c
 0047                   .dbfield 1 write_idx c
 0047                   .dbfield 2 read_idx c
 0047                   .dbfield 3 queue A[64:64]c
 0047                   .dbend
 0047                   .dbsym e queue _queue S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L39:
 0000 4750535377697463680A0D00  .byte 'G,'P,'S,'S,'w,'i,'t,'c,'h,10,13,0
 000C           L13:
 000C 475047474100      .byte 'G,'P,'G,'G,'A,0
